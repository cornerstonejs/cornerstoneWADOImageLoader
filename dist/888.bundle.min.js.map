{"version":3,"file":"888.bundle.min.js","mappings":"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","sources":["webpack://cornerstoneWADOImageLoader/../codecs/jpeg.js"],"sourcesContent":["// jshint ignore: start\r\n\r\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /\r\n /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\r\n/*\r\n Copyright 2011 notmasteryet\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n// - The JPEG specification can be found in the ITU CCITT Recommendation T.81\r\n//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)\r\n// - The JFIF specification can be found in the JPEG File Interchange Format\r\n//   (www.w3.org/Graphics/JPEG/jfif3.pdf)\r\n// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters\r\n//   in PostScript Level 2, Technical Note #5116\r\n//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\r\n\r\nvar ColorSpace = { Unkown: 0, Grayscale: 1, AdobeRGB: 2, RGB: 3, CYMK: 4 };\r\nvar JpegImage = (function jpegImage() {\r\n  'use strict';\r\n  var dctZigZag = new Int32Array([\r\n    0,\r\n    1,\r\n    8,\r\n    16,\r\n    9,\r\n    2,\r\n    3,\r\n    10,\r\n    17,\r\n    24,\r\n    32,\r\n    25,\r\n    18,\r\n    11,\r\n    4,\r\n    5,\r\n    12,\r\n    19,\r\n    26,\r\n    33,\r\n    40,\r\n    48,\r\n    41,\r\n    34,\r\n    27,\r\n    20,\r\n    13,\r\n    6,\r\n    7,\r\n    14,\r\n    21,\r\n    28,\r\n    35,\r\n    42,\r\n    49,\r\n    56,\r\n    57,\r\n    50,\r\n    43,\r\n    36,\r\n    29,\r\n    22,\r\n    15,\r\n    23,\r\n    30,\r\n    37,\r\n    44,\r\n    51,\r\n    58,\r\n    59,\r\n    52,\r\n    45,\r\n    38,\r\n    31,\r\n    39,\r\n    46,\r\n    53,\r\n    60,\r\n    61,\r\n    54,\r\n    47,\r\n    55,\r\n    62,\r\n    63,\r\n  ]);\r\n\r\n  var dctCos1 = 4017; // cos(pi/16)\r\n  var dctSin1 = 799; // sin(pi/16)\r\n  var dctCos3 = 3406; // cos(3*pi/16)\r\n  var dctSin3 = 2276; // sin(3*pi/16)\r\n  var dctCos6 = 1567; // cos(6*pi/16)\r\n  var dctSin6 = 3784; // sin(6*pi/16)\r\n  var dctSqrt2 = 5793; // sqrt(2)\r\n  var dctSqrt1d2 = 2896; // sqrt(2) / 2\r\n\r\n  function constructor() {}\r\n\r\n  function buildHuffmanTable(codeLengths, values) {\r\n    var k = 0,\r\n      code = [],\r\n      i,\r\n      j,\r\n      length = 16;\r\n    while (length > 0 && !codeLengths[length - 1]) length--;\r\n    code.push({ children: [], index: 0 });\r\n    var p = code[0],\r\n      q;\r\n    for (i = 0; i < length; i++) {\r\n      for (j = 0; j < codeLengths[i]; j++) {\r\n        p = code.pop();\r\n        p.children[p.index] = values[k];\r\n        while (p.index > 0) {\r\n          p = code.pop();\r\n        }\r\n        p.index++;\r\n        code.push(p);\r\n        while (code.length <= i) {\r\n          code.push((q = { children: [], index: 0 }));\r\n          p.children[p.index] = q.children;\r\n          p = q;\r\n        }\r\n        k++;\r\n      }\r\n      if (i + 1 < length) {\r\n        // p here points to last code\r\n        code.push((q = { children: [], index: 0 }));\r\n        p.children[p.index] = q.children;\r\n        p = q;\r\n      }\r\n    }\r\n    return code[0].children;\r\n  }\r\n\r\n  function getBlockBufferOffset(component, row, col) {\r\n    return 64 * ((component.blocksPerLine + 1) * row + col);\r\n  }\r\n\r\n  function decodeScan(\r\n    data,\r\n    offset,\r\n    frame,\r\n    components,\r\n    resetInterval,\r\n    spectralStart,\r\n    spectralEnd,\r\n    successivePrev,\r\n    successive\r\n  ) {\r\n    var precision = frame.precision;\r\n    var samplesPerLine = frame.samplesPerLine;\r\n    var scanLines = frame.scanLines;\r\n    var mcusPerLine = frame.mcusPerLine;\r\n    var progressive = frame.progressive;\r\n    var maxH = frame.maxH,\r\n      maxV = frame.maxV;\r\n\r\n    var startOffset = offset,\r\n      bitsData = 0,\r\n      bitsCount = 0;\r\n\r\n    function readBit() {\r\n      if (bitsCount > 0) {\r\n        bitsCount--;\r\n        return (bitsData >> bitsCount) & 1;\r\n      }\r\n      bitsData = data[offset++];\r\n      if (bitsData == 0xff) {\r\n        var nextByte = data[offset++];\r\n        if (nextByte) {\r\n          throw 'unexpected marker: ' +\r\n            ((bitsData << 8) | nextByte).toString(16);\r\n        }\r\n        // unstuff 0\r\n      }\r\n      bitsCount = 7;\r\n      return bitsData >>> 7;\r\n    }\r\n\r\n    function decodeHuffman(tree) {\r\n      var node = tree;\r\n      var bit;\r\n      while ((bit = readBit()) !== null) {\r\n        node = node[bit];\r\n        if (typeof node === 'number') return node;\r\n        if (typeof node !== 'object') throw 'invalid huffman sequence';\r\n      }\r\n      return null;\r\n    }\r\n\r\n    function receive(length) {\r\n      var n = 0;\r\n      while (length > 0) {\r\n        var bit = readBit();\r\n        if (bit === null) return;\r\n        n = (n << 1) | bit;\r\n        length--;\r\n      }\r\n      return n;\r\n    }\r\n\r\n    function receiveAndExtend(length) {\r\n      var n = receive(length);\r\n      if (n >= 1 << (length - 1)) return n;\r\n      return n + (-1 << length) + 1;\r\n    }\r\n\r\n    function decodeBaseline(component, offset) {\r\n      var t = decodeHuffman(component.huffmanTableDC);\r\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\r\n      component.blockData[offset] = component.pred += diff;\r\n      var k = 1;\r\n      while (k < 64) {\r\n        var rs = decodeHuffman(component.huffmanTableAC);\r\n        var s = rs & 15,\r\n          r = rs >> 4;\r\n        if (s === 0) {\r\n          if (r < 15) break;\r\n          k += 16;\r\n          continue;\r\n        }\r\n        k += r;\r\n        var z = dctZigZag[k];\r\n        component.blockData[offset + z] = receiveAndExtend(s);\r\n        k++;\r\n      }\r\n    }\r\n\r\n    function decodeDCFirst(component, offset) {\r\n      var t = decodeHuffman(component.huffmanTableDC);\r\n      var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\r\n      component.blockData[offset] = component.pred += diff;\r\n    }\r\n\r\n    function decodeDCSuccessive(component, offset) {\r\n      component.blockData[offset] |= readBit() << successive;\r\n    }\r\n\r\n    var eobrun = 0;\r\n    function decodeACFirst(component, offset) {\r\n      if (eobrun > 0) {\r\n        eobrun--;\r\n        return;\r\n      }\r\n      var k = spectralStart,\r\n        e = spectralEnd;\r\n      while (k <= e) {\r\n        var rs = decodeHuffman(component.huffmanTableAC);\r\n        var s = rs & 15,\r\n          r = rs >> 4;\r\n        if (s === 0) {\r\n          if (r < 15) {\r\n            eobrun = receive(r) + (1 << r) - 1;\r\n            break;\r\n          }\r\n          k += 16;\r\n          continue;\r\n        }\r\n        k += r;\r\n        var z = dctZigZag[k];\r\n        component.blockData[offset + z] =\r\n          receiveAndExtend(s) * (1 << successive);\r\n        k++;\r\n      }\r\n    }\r\n\r\n    var successiveACState = 0,\r\n      successiveACNextValue;\r\n    function decodeACSuccessive(component, offset) {\r\n      var k = spectralStart,\r\n        e = spectralEnd,\r\n        r = 0;\r\n      while (k <= e) {\r\n        var z = dctZigZag[k];\r\n        switch (successiveACState) {\r\n          case 0: // initial state\r\n            var rs = decodeHuffman(component.huffmanTableAC);\r\n            var s = rs & 15;\r\n            r = rs >> 4;\r\n            if (s === 0) {\r\n              if (r < 15) {\r\n                eobrun = receive(r) + (1 << r);\r\n                successiveACState = 4;\r\n              } else {\r\n                r = 16;\r\n                successiveACState = 1;\r\n              }\r\n            } else {\r\n              if (s !== 1) throw 'invalid ACn encoding';\r\n              successiveACNextValue = receiveAndExtend(s);\r\n              successiveACState = r ? 2 : 3;\r\n            }\r\n            continue;\r\n          case 1: // skipping r zero items\r\n          case 2:\r\n            if (component.blockData[offset + z]) {\r\n              component.blockData[offset + z] += readBit() << successive;\r\n            } else {\r\n              r--;\r\n              if (r === 0) successiveACState = successiveACState == 2 ? 3 : 0;\r\n            }\r\n            break;\r\n          case 3: // set value for a zero item\r\n            if (component.blockData[offset + z]) {\r\n              component.blockData[offset + z] += readBit() << successive;\r\n            } else {\r\n              component.blockData[offset + z] =\r\n                successiveACNextValue << successive;\r\n              successiveACState = 0;\r\n            }\r\n            break;\r\n          case 4: // eob\r\n            if (component.blockData[offset + z]) {\r\n              component.blockData[offset + z] += readBit() << successive;\r\n            }\r\n            break;\r\n        }\r\n        k++;\r\n      }\r\n      if (successiveACState === 4) {\r\n        eobrun--;\r\n        if (eobrun === 0) successiveACState = 0;\r\n      }\r\n    }\r\n\r\n    function decodeMcu(component, decode, mcu, row, col) {\r\n      var mcuRow = (mcu / mcusPerLine) | 0;\r\n      var mcuCol = mcu % mcusPerLine;\r\n      var blockRow = mcuRow * component.v + row;\r\n      var blockCol = mcuCol * component.h + col;\r\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\r\n      decode(component, offset);\r\n    }\r\n\r\n    function decodeBlock(component, decode, mcu) {\r\n      var blockRow = (mcu / component.blocksPerLine) | 0;\r\n      var blockCol = mcu % component.blocksPerLine;\r\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\r\n      decode(component, offset);\r\n    }\r\n\r\n    var componentsLength = components.length;\r\n    var component, i, j, k, n;\r\n    var decodeFn;\r\n    if (progressive) {\r\n      if (spectralStart === 0)\r\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\r\n      else decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\r\n    } else {\r\n      decodeFn = decodeBaseline;\r\n    }\r\n\r\n    var mcu = 0,\r\n      marker;\r\n    var mcuExpected;\r\n    if (componentsLength == 1) {\r\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\r\n    } else {\r\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\r\n    }\r\n    if (!resetInterval) {\r\n      resetInterval = mcuExpected;\r\n    }\r\n\r\n    var h, v;\r\n    while (mcu < mcuExpected) {\r\n      // reset interval stuff\r\n      for (i = 0; i < componentsLength; i++) {\r\n        components[i].pred = 0;\r\n      }\r\n      eobrun = 0;\r\n\r\n      if (componentsLength == 1) {\r\n        component = components[0];\r\n        for (n = 0; n < resetInterval; n++) {\r\n          decodeBlock(component, decodeFn, mcu);\r\n          mcu++;\r\n        }\r\n      } else {\r\n        for (n = 0; n < resetInterval; n++) {\r\n          for (i = 0; i < componentsLength; i++) {\r\n            component = components[i];\r\n            h = component.h;\r\n            v = component.v;\r\n            for (j = 0; j < v; j++) {\r\n              for (k = 0; k < h; k++) {\r\n                decodeMcu(component, decodeFn, mcu, j, k);\r\n              }\r\n            }\r\n          }\r\n          mcu++;\r\n        }\r\n      }\r\n\r\n      // find marker\r\n      bitsCount = 0;\r\n      marker = (data[offset] << 8) | data[offset + 1];\r\n      if (marker <= 0xff00) {\r\n        throw 'marker was not found';\r\n      }\r\n\r\n      if (marker >= 0xffd0 && marker <= 0xffd7) {\r\n        // RSTx\r\n        offset += 2;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return offset - startOffset;\r\n  }\r\n\r\n  // A port of poppler's IDCT method which in turn is taken from:\r\n  //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\r\n  //   \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\",\r\n  //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\r\n  //   988-991.\r\n  function quantizeAndInverse(component, blockBufferOffset, p) {\r\n    var qt = component.quantizationTable;\r\n    var v0, v1, v2, v3, v4, v5, v6, v7, t;\r\n    var i;\r\n\r\n    // dequant\r\n    for (i = 0; i < 64; i++) {\r\n      p[i] = component.blockData[blockBufferOffset + i] * qt[i];\r\n    }\r\n\r\n    // inverse DCT on rows\r\n    for (i = 0; i < 8; ++i) {\r\n      var row = 8 * i;\r\n\r\n      // check for all-zero AC coefficients\r\n      if (\r\n        p[1 + row] === 0 &&\r\n        p[2 + row] === 0 &&\r\n        p[3 + row] === 0 &&\r\n        p[4 + row] === 0 &&\r\n        p[5 + row] === 0 &&\r\n        p[6 + row] === 0 &&\r\n        p[7 + row] === 0\r\n      ) {\r\n        t = (dctSqrt2 * p[0 + row] + 512) >> 10;\r\n        p[0 + row] = t;\r\n        p[1 + row] = t;\r\n        p[2 + row] = t;\r\n        p[3 + row] = t;\r\n        p[4 + row] = t;\r\n        p[5 + row] = t;\r\n        p[6 + row] = t;\r\n        p[7 + row] = t;\r\n        continue;\r\n      }\r\n\r\n      // stage 4\r\n      v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;\r\n      v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;\r\n      v2 = p[2 + row];\r\n      v3 = p[6 + row];\r\n      v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;\r\n      v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;\r\n      v5 = p[3 + row] << 4;\r\n      v6 = p[5 + row] << 4;\r\n\r\n      // stage 3\r\n      t = (v0 - v1 + 1) >> 1;\r\n      v0 = (v0 + v1 + 1) >> 1;\r\n      v1 = t;\r\n      t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\r\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\r\n      v3 = t;\r\n      t = (v4 - v6 + 1) >> 1;\r\n      v4 = (v4 + v6 + 1) >> 1;\r\n      v6 = t;\r\n      t = (v7 + v5 + 1) >> 1;\r\n      v5 = (v7 - v5 + 1) >> 1;\r\n      v7 = t;\r\n\r\n      // stage 2\r\n      t = (v0 - v3 + 1) >> 1;\r\n      v0 = (v0 + v3 + 1) >> 1;\r\n      v3 = t;\r\n      t = (v1 - v2 + 1) >> 1;\r\n      v1 = (v1 + v2 + 1) >> 1;\r\n      v2 = t;\r\n      t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\r\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\r\n      v7 = t;\r\n      t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\r\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\r\n      v6 = t;\r\n\r\n      // stage 1\r\n      p[0 + row] = v0 + v7;\r\n      p[7 + row] = v0 - v7;\r\n      p[1 + row] = v1 + v6;\r\n      p[6 + row] = v1 - v6;\r\n      p[2 + row] = v2 + v5;\r\n      p[5 + row] = v2 - v5;\r\n      p[3 + row] = v3 + v4;\r\n      p[4 + row] = v3 - v4;\r\n    }\r\n\r\n    // inverse DCT on columns\r\n    for (i = 0; i < 8; ++i) {\r\n      var col = i;\r\n\r\n      // check for all-zero AC coefficients\r\n      if (\r\n        p[1 * 8 + col] === 0 &&\r\n        p[2 * 8 + col] === 0 &&\r\n        p[3 * 8 + col] === 0 &&\r\n        p[4 * 8 + col] === 0 &&\r\n        p[5 * 8 + col] === 0 &&\r\n        p[6 * 8 + col] === 0 &&\r\n        p[7 * 8 + col] === 0\r\n      ) {\r\n        t = (dctSqrt2 * p[i + 0] + 8192) >> 14;\r\n        p[0 * 8 + col] = t;\r\n        p[1 * 8 + col] = t;\r\n        p[2 * 8 + col] = t;\r\n        p[3 * 8 + col] = t;\r\n        p[4 * 8 + col] = t;\r\n        p[5 * 8 + col] = t;\r\n        p[6 * 8 + col] = t;\r\n        p[7 * 8 + col] = t;\r\n        continue;\r\n      }\r\n\r\n      // stage 4\r\n      v0 = (dctSqrt2 * p[0 * 8 + col] + 2048) >> 12;\r\n      v1 = (dctSqrt2 * p[4 * 8 + col] + 2048) >> 12;\r\n      v2 = p[2 * 8 + col];\r\n      v3 = p[6 * 8 + col];\r\n      v4 = (dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048) >> 12;\r\n      v7 = (dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048) >> 12;\r\n      v5 = p[3 * 8 + col];\r\n      v6 = p[5 * 8 + col];\r\n\r\n      // stage 3\r\n      t = (v0 - v1 + 1) >> 1;\r\n      v0 = (v0 + v1 + 1) >> 1;\r\n      v1 = t;\r\n      t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\r\n      v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\r\n      v3 = t;\r\n      t = (v4 - v6 + 1) >> 1;\r\n      v4 = (v4 + v6 + 1) >> 1;\r\n      v6 = t;\r\n      t = (v7 + v5 + 1) >> 1;\r\n      v5 = (v7 - v5 + 1) >> 1;\r\n      v7 = t;\r\n\r\n      // stage 2\r\n      t = (v0 - v3 + 1) >> 1;\r\n      v0 = (v0 + v3 + 1) >> 1;\r\n      v3 = t;\r\n      t = (v1 - v2 + 1) >> 1;\r\n      v1 = (v1 + v2 + 1) >> 1;\r\n      v2 = t;\r\n      t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\r\n      v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\r\n      v7 = t;\r\n      t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\r\n      v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\r\n      v6 = t;\r\n\r\n      // stage 1\r\n      p[0 * 8 + col] = v0 + v7;\r\n      p[7 * 8 + col] = v0 - v7;\r\n      p[1 * 8 + col] = v1 + v6;\r\n      p[6 * 8 + col] = v1 - v6;\r\n      p[2 * 8 + col] = v2 + v5;\r\n      p[5 * 8 + col] = v2 - v5;\r\n      p[3 * 8 + col] = v3 + v4;\r\n      p[4 * 8 + col] = v3 - v4;\r\n    }\r\n\r\n    // convert to 8-bit integers\r\n    for (i = 0; i < 64; ++i) {\r\n      var index = blockBufferOffset + i;\r\n      var q = p[i];\r\n      q =\r\n        q <= -2056 / component.bitConversion\r\n          ? 0\r\n          : q >= 2024 / component.bitConversion\r\n          ? 255 / component.bitConversion\r\n          : (q + 2056 / component.bitConversion) >> 4;\r\n      component.blockData[index] = q;\r\n    }\r\n  }\r\n\r\n  function buildComponentData(frame, component) {\r\n    var lines = [];\r\n    var blocksPerLine = component.blocksPerLine;\r\n    var blocksPerColumn = component.blocksPerColumn;\r\n    var samplesPerLine = blocksPerLine << 3;\r\n    var computationBuffer = new Int32Array(64);\r\n\r\n    var i,\r\n      j,\r\n      ll = 0;\r\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\r\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\r\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\r\n        quantizeAndInverse(component, offset, computationBuffer);\r\n      }\r\n    }\r\n    return component.blockData;\r\n  }\r\n\r\n  function clampToUint8(a) {\r\n    return a <= 0 ? 0 : a >= 255 ? 255 : a | 0;\r\n  }\r\n\r\n  constructor.prototype = {\r\n    load: function load(path) {\r\n      var handleData = function(data) {\r\n        this.parse(data);\r\n        if (this.onload) this.onload();\r\n      }.bind(this);\r\n\r\n      if (path.indexOf('data:') > -1) {\r\n        var offset = path.indexOf('base64,') + 7;\r\n        var data = atob(path.substring(offset));\r\n        var arr = new Uint8Array(data.length);\r\n        for (var i = data.length - 1; i >= 0; i--) {\r\n          arr[i] = data.charCodeAt(i);\r\n        }\r\n        handleData(data);\r\n      } else {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open('GET', path, true);\r\n        xhr.responseType = 'arraybuffer';\r\n        xhr.onload = function() {\r\n          // TODO catch parse error\r\n          var data = new Uint8Array(xhr.response);\r\n          handleData(data);\r\n        }.bind(this);\r\n        xhr.send(null);\r\n      }\r\n    },\r\n    parse: function parse(data) {\r\n      function readUint16() {\r\n        var value = (data[offset] << 8) | data[offset + 1];\r\n        offset += 2;\r\n        return value;\r\n      }\r\n\r\n      function readDataBlock() {\r\n        var length = readUint16();\r\n        var array = data.subarray(offset, offset + length - 2);\r\n        offset += array.length;\r\n        return array;\r\n      }\r\n\r\n      function prepareComponents(frame) {\r\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\r\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\r\n        for (var i = 0; i < frame.components.length; i++) {\r\n          component = frame.components[i];\r\n          var blocksPerLine = Math.ceil(\r\n            (Math.ceil(frame.samplesPerLine / 8) * component.h) / frame.maxH\r\n          );\r\n          var blocksPerColumn = Math.ceil(\r\n            (Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV\r\n          );\r\n          var blocksPerLineForMcu = mcusPerLine * component.h;\r\n          var blocksPerColumnForMcu = mcusPerColumn * component.v;\r\n\r\n          var blocksBufferSize =\r\n            64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\r\n          component.blockData = new Int16Array(blocksBufferSize);\r\n          component.blocksPerLine = blocksPerLine;\r\n          component.blocksPerColumn = blocksPerColumn;\r\n        }\r\n        frame.mcusPerLine = mcusPerLine;\r\n        frame.mcusPerColumn = mcusPerColumn;\r\n      }\r\n\r\n      var offset = 0,\r\n        length = data.length;\r\n      var jfif = null;\r\n      var adobe = null;\r\n      var pixels = null;\r\n      var frame, resetInterval;\r\n      var quantizationTables = [];\r\n      var huffmanTablesAC = [],\r\n        huffmanTablesDC = [];\r\n      var fileMarker = readUint16();\r\n      if (fileMarker != 0xffd8) {\r\n        // SOI (Start of Image)\r\n        throw 'SOI not found';\r\n      }\r\n\r\n      fileMarker = readUint16();\r\n      while (fileMarker != 0xffd9) {\r\n        // EOI (End of image)\r\n        var i, j, l;\r\n        switch (fileMarker) {\r\n          case 0xffe0: // APP0 (Application Specific)\r\n          case 0xffe1: // APP1\r\n          case 0xffe2: // APP2\r\n          case 0xffe3: // APP3\r\n          case 0xffe4: // APP4\r\n          case 0xffe5: // APP5\r\n          case 0xffe6: // APP6\r\n          case 0xffe7: // APP7\r\n          case 0xffe8: // APP8\r\n          case 0xffe9: // APP9\r\n          case 0xffea: // APP10\r\n          case 0xffeb: // APP11\r\n          case 0xffec: // APP12\r\n          case 0xffed: // APP13\r\n          case 0xffee: // APP14\r\n          case 0xffef: // APP15\r\n          case 0xfffe: // COM (Comment)\r\n            var appData = readDataBlock();\r\n\r\n            if (fileMarker === 0xffe0) {\r\n              if (\r\n                appData[0] === 0x4a &&\r\n                appData[1] === 0x46 &&\r\n                appData[2] === 0x49 &&\r\n                appData[3] === 0x46 &&\r\n                appData[4] === 0\r\n              ) {\r\n                // 'JFIF\\x00'\r\n                jfif = {\r\n                  version: { major: appData[5], minor: appData[6] },\r\n                  densityUnits: appData[7],\r\n                  xDensity: (appData[8] << 8) | appData[9],\r\n                  yDensity: (appData[10] << 8) | appData[11],\r\n                  thumbWidth: appData[12],\r\n                  thumbHeight: appData[13],\r\n                  thumbData: appData.subarray(\r\n                    14,\r\n                    14 + 3 * appData[12] * appData[13]\r\n                  ),\r\n                };\r\n              }\r\n            }\r\n            // TODO APP1 - Exif\r\n            if (fileMarker === 0xffee) {\r\n              if (\r\n                appData[0] === 0x41 &&\r\n                appData[1] === 0x64 &&\r\n                appData[2] === 0x6f &&\r\n                appData[3] === 0x62 &&\r\n                appData[4] === 0x65 &&\r\n                appData[5] === 0\r\n              ) {\r\n                // 'Adobe\\x00'\r\n                adobe = {\r\n                  version: appData[6],\r\n                  flags0: (appData[7] << 8) | appData[8],\r\n                  flags1: (appData[9] << 8) | appData[10],\r\n                  transformCode: appData[11],\r\n                };\r\n              }\r\n            }\r\n            break;\r\n\r\n          case 0xffdb: // DQT (Define Quantization Tables)\r\n            var quantizationTablesLength = readUint16();\r\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\r\n            while (offset < quantizationTablesEnd) {\r\n              var quantizationTableSpec = data[offset++];\r\n              var tableData = new Int32Array(64);\r\n              if (quantizationTableSpec >> 4 === 0) {\r\n                // 8 bit values\r\n                for (j = 0; j < 64; j++) {\r\n                  var z = dctZigZag[j];\r\n                  tableData[z] = data[offset++];\r\n                }\r\n              } else if (quantizationTableSpec >> 4 === 1) {\r\n                //16 bit\r\n                for (j = 0; j < 64; j++) {\r\n                  var zz = dctZigZag[j];\r\n                  tableData[zz] = readUint16();\r\n                }\r\n              } else throw 'DQT: invalid table spec';\r\n              quantizationTables[quantizationTableSpec & 15] = tableData;\r\n            }\r\n            break;\r\n\r\n          case 0xffc0: // SOF0 (Start of Frame, Baseline DCT)\r\n          case 0xffc1: // SOF1 (Start of Frame, Extended DCT)\r\n          case 0xffc2: // SOF2 (Start of Frame, Progressive DCT)\r\n            if (frame) {\r\n              throw 'Only single frame JPEGs supported';\r\n            }\r\n            readUint16(); // skip data length\r\n            frame = {};\r\n            frame.extended = fileMarker === 0xffc1;\r\n            frame.progressive = fileMarker === 0xffc2;\r\n            frame.precision = data[offset++];\r\n            frame.scanLines = readUint16();\r\n            frame.samplesPerLine = readUint16();\r\n            frame.components = [];\r\n            frame.componentIds = {};\r\n            var componentsCount = data[offset++],\r\n              componentId;\r\n            var maxH = 0,\r\n              maxV = 0;\r\n            for (i = 0; i < componentsCount; i++) {\r\n              componentId = data[offset];\r\n              var h = data[offset + 1] >> 4;\r\n              var v = data[offset + 1] & 15;\r\n              if (maxH < h) maxH = h;\r\n              if (maxV < v) maxV = v;\r\n              var qId = data[offset + 2];\r\n              l = frame.components.push({\r\n                h: h,\r\n                v: v,\r\n                quantizationTable: quantizationTables[qId],\r\n                quantizationTableId: qId,\r\n                bitConversion: 255 / ((1 << frame.precision) - 1),\r\n              });\r\n              frame.componentIds[componentId] = l - 1;\r\n              offset += 3;\r\n            }\r\n            frame.maxH = maxH;\r\n            frame.maxV = maxV;\r\n            prepareComponents(frame);\r\n            break;\r\n\r\n          case 0xffc4: // DHT (Define Huffman Tables)\r\n            var huffmanLength = readUint16();\r\n            for (i = 2; i < huffmanLength; ) {\r\n              var huffmanTableSpec = data[offset++];\r\n              var codeLengths = new Uint8Array(16);\r\n              var codeLengthSum = 0;\r\n              for (j = 0; j < 16; j++, offset++)\r\n                codeLengthSum += codeLengths[j] = data[offset];\r\n              var huffmanValues = new Uint8Array(codeLengthSum);\r\n              for (j = 0; j < codeLengthSum; j++, offset++)\r\n                huffmanValues[j] = data[offset];\r\n              i += 17 + codeLengthSum;\r\n\r\n              (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[\r\n                huffmanTableSpec & 15\r\n              ] = buildHuffmanTable(codeLengths, huffmanValues);\r\n            }\r\n            break;\r\n\r\n          case 0xffdd: // DRI (Define Restart Interval)\r\n            readUint16(); // skip data length\r\n            resetInterval = readUint16();\r\n            break;\r\n\r\n          case 0xffda: // SOS (Start of Scan)\r\n            var scanLength = readUint16();\r\n            var selectorsCount = data[offset++];\r\n            var components = [],\r\n              component;\r\n            for (i = 0; i < selectorsCount; i++) {\r\n              var componentIndex = frame.componentIds[data[offset++]];\r\n              component = frame.components[componentIndex];\r\n              var tableSpec = data[offset++];\r\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\r\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\r\n              components.push(component);\r\n            }\r\n            var spectralStart = data[offset++];\r\n            var spectralEnd = data[offset++];\r\n            var successiveApproximation = data[offset++];\r\n            var processed = decodeScan(\r\n              data,\r\n              offset,\r\n              frame,\r\n              components,\r\n              resetInterval,\r\n              spectralStart,\r\n              spectralEnd,\r\n              successiveApproximation >> 4,\r\n              successiveApproximation & 15\r\n            );\r\n            offset += processed;\r\n            break;\r\n          case 0xffff: // Fill bytes\r\n            if (data[offset] !== 0xff) {\r\n              // Avoid skipping a valid marker.\r\n              offset--;\r\n            }\r\n            break;\r\n          default:\r\n            if (\r\n              data[offset - 3] == 0xff &&\r\n              data[offset - 2] >= 0xc0 &&\r\n              data[offset - 2] <= 0xfe\r\n            ) {\r\n              // could be incorrect encoding -- last 0xFF byte of the previous\r\n              // block was eaten by the encoder\r\n              offset -= 3;\r\n              break;\r\n            }\r\n            throw 'unknown JPEG marker ' + fileMarker.toString(16);\r\n        }\r\n        fileMarker = readUint16();\r\n      }\r\n\r\n      this.width = frame.samplesPerLine;\r\n      this.height = frame.scanLines;\r\n      this.jfif = jfif;\r\n      this.adobe = adobe;\r\n      this.components = [];\r\n      switch (frame.components.length) {\r\n        case 1:\r\n          this.colorspace = ColorSpace.Grayscale;\r\n          break;\r\n        case 3:\r\n          if (this.adobe) this.colorspace = ColorSpace.AdobeRGB;\r\n          else this.colorspace = ColorSpace.RGB;\r\n          break;\r\n        case 4:\r\n          this.colorspace = ColorSpace.CYMK;\r\n          break;\r\n        default:\r\n          this.colorspace = ColorSpace.Unknown;\r\n      }\r\n      for (var i = 0; i < frame.components.length; i++) {\r\n        var component = frame.components[i];\r\n        if (\r\n          !component.quantizationTable &&\r\n          component.quantizationTableId !== null\r\n        )\r\n          component.quantizationTable =\r\n            quantizationTables[component.quantizationTableId];\r\n        this.components.push({\r\n          output: buildComponentData(frame, component),\r\n          scaleX: component.h / frame.maxH,\r\n          scaleY: component.v / frame.maxV,\r\n          blocksPerLine: component.blocksPerLine,\r\n          blocksPerColumn: component.blocksPerColumn,\r\n          bitConversion: component.bitConversion,\r\n        });\r\n      }\r\n    },\r\n    getData16: function getData16(width, height) {\r\n      if (this.components.length !== 1) throw 'Unsupported color mode';\r\n      var scaleX = this.width / width,\r\n        scaleY = this.height / height;\r\n\r\n      var component, componentScaleX, componentScaleY;\r\n      var x, y, i;\r\n      var offset = 0;\r\n      var numComponents = this.components.length;\r\n      var dataLength = width * height * numComponents;\r\n      var data = new Uint16Array(dataLength);\r\n      var componentLine;\r\n\r\n      // lineData is reused for all components. Assume first component is\r\n      // the biggest\r\n      var lineData = new Uint16Array(\r\n        (this.components[0].blocksPerLine << 3) *\r\n          this.components[0].blocksPerColumn *\r\n          8\r\n      );\r\n\r\n      // First construct image data ...\r\n      for (i = 0; i < numComponents; i++) {\r\n        component = this.components[i];\r\n        var blocksPerLine = component.blocksPerLine;\r\n        var blocksPerColumn = component.blocksPerColumn;\r\n        var samplesPerLine = blocksPerLine << 3;\r\n\r\n        var j,\r\n          k,\r\n          ll = 0;\r\n        var lineOffset = 0;\r\n        for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\r\n          var scanLine = blockRow << 3;\r\n          for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\r\n            var bufferOffset = getBlockBufferOffset(\r\n              component,\r\n              blockRow,\r\n              blockCol\r\n            );\r\n            var offset = 0,\r\n              sample = blockCol << 3;\r\n            for (j = 0; j < 8; j++) {\r\n              var lineOffset = (scanLine + j) * samplesPerLine;\r\n              for (k = 0; k < 8; k++) {\r\n                lineData[lineOffset + sample + k] =\r\n                  component.output[bufferOffset + offset++];\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        componentScaleX = component.scaleX * scaleX;\r\n        componentScaleY = component.scaleY * scaleY;\r\n        offset = i;\r\n\r\n        var cx, cy;\r\n        var index;\r\n        for (y = 0; y < height; y++) {\r\n          for (x = 0; x < width; x++) {\r\n            cy = 0 | (y * componentScaleY);\r\n            cx = 0 | (x * componentScaleX);\r\n            index = cy * samplesPerLine + cx;\r\n            data[offset] = lineData[index];\r\n            offset += numComponents;\r\n          }\r\n        }\r\n      }\r\n      return data;\r\n    },\r\n    getData: function getData(width, height) {\r\n      var scaleX = this.width / width,\r\n        scaleY = this.height / height;\r\n\r\n      var component, componentScaleX, componentScaleY;\r\n      var x, y, i;\r\n      var offset = 0;\r\n      var Y, Cb, Cr, K, C, M, Ye, R, G, B;\r\n      var colorTransform;\r\n      var numComponents = this.components.length;\r\n      var dataLength = width * height * numComponents;\r\n      var data = new Uint8Array(dataLength);\r\n      var componentLine;\r\n\r\n      // lineData is reused for all components. Assume first component is\r\n      // the biggest\r\n      var lineData = new Uint8Array(\r\n        (this.components[0].blocksPerLine << 3) *\r\n          this.components[0].blocksPerColumn *\r\n          8\r\n      );\r\n\r\n      // First construct image data ...\r\n      for (i = 0; i < numComponents; i++) {\r\n        component = this.components[i];\r\n        var blocksPerLine = component.blocksPerLine;\r\n        var blocksPerColumn = component.blocksPerColumn;\r\n        var samplesPerLine = blocksPerLine << 3;\r\n\r\n        var j,\r\n          k,\r\n          ll = 0;\r\n        var lineOffset = 0;\r\n        for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\r\n          var scanLine = blockRow << 3;\r\n          for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\r\n            var bufferOffset = getBlockBufferOffset(\r\n              component,\r\n              blockRow,\r\n              blockCol\r\n            );\r\n            var offset = 0,\r\n              sample = blockCol << 3;\r\n            for (j = 0; j < 8; j++) {\r\n              var lineOffset = (scanLine + j) * samplesPerLine;\r\n              for (k = 0; k < 8; k++) {\r\n                lineData[lineOffset + sample + k] =\r\n                  component.output[bufferOffset + offset++] *\r\n                  component.bitConversion;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        componentScaleX = component.scaleX * scaleX;\r\n        componentScaleY = component.scaleY * scaleY;\r\n        offset = i;\r\n\r\n        var cx, cy;\r\n        var index;\r\n        for (y = 0; y < height; y++) {\r\n          for (x = 0; x < width; x++) {\r\n            cy = 0 | (y * componentScaleY);\r\n            cx = 0 | (x * componentScaleX);\r\n            index = cy * samplesPerLine + cx;\r\n            data[offset] = lineData[index];\r\n            offset += numComponents;\r\n          }\r\n        }\r\n      }\r\n\r\n      // ... then transform colors, if necessary\r\n      switch (numComponents) {\r\n        case 1:\r\n        case 2:\r\n          break;\r\n        // no color conversion for one or two compoenents\r\n\r\n        case 3:\r\n          // The default transform for three components is true\r\n          colorTransform = true;\r\n          // The adobe transform marker overrides any previous setting\r\n          if (this.adobe && this.adobe.transformCode) colorTransform = true;\r\n          else if (typeof this.colorTransform !== 'undefined')\r\n            colorTransform = !!this.colorTransform;\r\n\r\n          if (colorTransform) {\r\n            for (i = 0; i < dataLength; i += numComponents) {\r\n              Y = data[i];\r\n              Cb = data[i + 1];\r\n              Cr = data[i + 2];\r\n\r\n              R = clampToUint8(Y - 179.456 + 1.402 * Cr);\r\n              G = clampToUint8(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);\r\n              B = clampToUint8(Y - 226.816 + 1.772 * Cb);\r\n\r\n              data[i] = R;\r\n              data[i + 1] = G;\r\n              data[i + 2] = B;\r\n            }\r\n          }\r\n          break;\r\n        case 4:\r\n          if (!this.adobe) throw 'Unsupported color mode (4 components)';\r\n          // The default transform for four components is false\r\n          colorTransform = false;\r\n          // The adobe transform marker overrides any previous setting\r\n          if (this.adobe && this.adobe.transformCode) colorTransform = true;\r\n          else if (typeof this.colorTransform !== 'undefined')\r\n            colorTransform = !!this.colorTransform;\r\n\r\n          if (colorTransform) {\r\n            for (i = 0; i < dataLength; i += numComponents) {\r\n              Y = data[i];\r\n              Cb = data[i + 1];\r\n              Cr = data[i + 2];\r\n\r\n              C = clampToUint8(434.456 - Y - 1.402 * Cr);\r\n              M = clampToUint8(119.541 - Y + 0.344 * Cb + 0.714 * Cr);\r\n              Y = clampToUint8(481.816 - Y - 1.772 * Cb);\r\n\r\n              data[i] = C;\r\n              data[i + 1] = M;\r\n              data[i + 2] = Y;\r\n              // K is unchanged\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          throw 'Unsupported color mode';\r\n      }\r\n      return data;\r\n    },\r\n  };\r\n\r\n  return constructor;\r\n})();\r\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = {\n  JpegImage\n};\n"],"names":["ColorSpace","Unkown","Grayscale","AdobeRGB","RGB","CYMK","JpegImage","dctZigZag","Int32Array","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","constructor","buildHuffmanTable","codeLengths","values","i","j","k","code","length","push","children","index","q","p","pop","getBlockBufferOffset","component","row","col","blocksPerLine","decodeScan","data","offset","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","precision","samplesPerLine","scanLines","mcusPerLine","progressive","startOffset","maxH","maxV","bitsData","bitsCount","readBit","nextByte","toString","decodeHuffman","tree","bit","node","receive","n","receiveAndExtend","eobrun","successiveACNextValue","successiveACState","decodeMcu","decode","mcu","mcuCol","v","h","decodeBlock","decodeFn","componentsLength","t","huffmanTableDC","diff","blockData","pred","e","rs","huffmanTableAC","s","r","z","marker","mcuExpected","blocksPerColumn","mcusPerColumn","quantizeAndInverse","blockBufferOffset","v0","v1","v2","v3","v4","v5","v6","v7","qt","quantizationTable","bitConversion","buildComponentData","computationBuffer","blockRow","blockCol","clampToUint8","a","prototype","load","path","handleData","this","parse","onload","bind","indexOf","atob","substring","arr","Uint8Array","charCodeAt","xhr","XMLHttpRequest","open","responseType","response","send","readUint16","value","readDataBlock","array","subarray","prepareComponents","Math","ceil","blocksPerLineForMcu","blocksBufferSize","Int16Array","jfif","adobe","quantizationTables","huffmanTablesAC","huffmanTablesDC","fileMarker","l","appData","version","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesEnd","quantizationTableSpec","tableData","extended","componentIds","componentId","componentsCount","qId","quantizationTableId","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","componentIndex","tableSpec","successiveApproximation","processed","width","height","colorspace","Unknown","output","scaleX","scaleY","getData16","componentScaleX","componentScaleY","x","y","numComponents","Uint16Array","lineData","lineOffset","scanLine","bufferOffset","sample","getData","Y","Cb","Cr","C","M","R","G","B","colorTransform","dataLength","module","exports"],"sourceRoot":""}